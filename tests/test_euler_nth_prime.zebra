func boolean isprime(int n) {
    if (n <= 1) {
        return false;
    }
    if (n == 2) {
        return true;
    }
    if (n % 2 == 0) {
        return false;
    }
    var int m = (n)^(1/2);
    @ zout('inner_checkpoint');
    for (var int i = 3; i <= m; i = i + 2) {
        @ zout('i',i);
        if (n % i == 0) {
            @ zout('innermost');
            return false;
        }
        @ zout(i);
    }
    return true;
}

func int nthprime(int n) {
    var int count = 1;
    if (n == 1){
        return 2;
    }
    var int i = 3;
    while (count < n) {
        @ zout(i);
        if (isprime(i) == true) {
            count = count +1;
        }
        @ zout('checkpoint');
        i = i + 2;
    }
    return i - 2;
}

var int k = 1000;

var int answer = nthprime(k);

zout(answer);