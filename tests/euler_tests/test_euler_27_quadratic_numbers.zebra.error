@ -126479
func boolean isprime(int n) {
    @zout('entered isprime',n);
    if (n < 2) {
        return false;
    }
    if (n == 2 || n == 3) {
        return true;
    }
    var int m = (n)^(1/2);
    for (var int i = 2; i <= m; i=i+1) {
        if (n % i == 0) {
            return false;
        }
        else{
            return true;
        }
    }
}

func int Quadraticprimes() {
    var int maxconsecutiveprimes = 0;
    var int maxa = 0;
    var int maxb = 0;

    for (var int a = -99; a < 100; a=a+1) {
        for (var int b = -100; b <= 100; b=b+1) {
            @zout('a','b',a,' ',b);
            var int n = 0;
            while (isprime(n*n + a*n + b)) {
                @zout('n',n);
                n=n+1;
            }
            @zout('final-n',n);
            if (n > maxconsecutiveprimes) {
                maxconsecutiveprimes = n;
                maxa = a;
                maxb = b;
            }
        }
    }

    var int result = maxa * maxb;

    return result;
}

var int answer = Quadraticprimes();
zout(answer);